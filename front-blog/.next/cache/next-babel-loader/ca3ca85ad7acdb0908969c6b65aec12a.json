{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport \"../static/style/global/comm.less\";\nimport \"../static/style/pages/Home.less\";\nimport \"../static/style/pages/Detail.less\";\nimport 'markdown-navbar/dist/navbar.css';\nimport Head from \"next/head\";\nimport { Row, Col, List, Breadcrumb, Affix } from \"antd\";\nimport { CalendarOutlined, FolderOutlined, FireOutlined } from \"@ant-design/icons\";\nimport ReactMarkdown from 'react-markdown';\nimport MarkNav from 'markdown-navbar';\nimport { getArticleById } from \"../api/index\";\nimport marked from 'marked';\nimport hljs from \"highlight.js\";\nimport 'highlight.js/styles/monokai-sublime.css';\nimport Header from \"../components/Header.js\";\nimport Author from \"../components/Author.js\";\nimport Footer from \"../components/Footer.js\";\nimport Tocify from \"../components/tocify.tsx\";\n\nfunction detail({\n  content\n}) {\n  const {\n    markdownVal,\n    tocify\n  } = useMemo(() => {\n    const renderer = new marked.Renderer();\n    const tocify = new Tocify();\n    console.log(renderer, 'renderer');\n\n    renderer.heading = function (text, level, raw) {\n      const anchor = tocify.add(text, level);\n      return `<a id=\"${anchor}\" href=\"#${anchor}\" class=\"anchor-fix\"><h${level}>${text}</h${level}></a>\\n`;\n    };\n\n    marked.setOptions({\n      renderer: renderer,\n      gfm: true,\n      pedantic: false,\n      sanitize: false,\n      tables: true,\n      breaks: false,\n      smartLists: true,\n      smartypants: false,\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n    let html = marked(content.article_content || '');\n    return {\n      markdownVal: html,\n      tocify\n    };\n  }, []);\n\n  let header = __jsx(\"div\", null, __jsx(Breadcrumb, null, __jsx(Breadcrumb.Item, null, __jsx(\"a\", {\n    href: \"/\"\n  }, \" \", __jsx(\"span\", {\n    className: \"bread-txt\"\n  }, \"\\u9996\\u9875\"), \" \")), __jsx(Breadcrumb.Item, null, __jsx(\"a\", {\n    href: \"/list\"\n  }, \" \", __jsx(\"span\", {\n    className: \"bread-txt\"\n  }, \"\\u89C6\\u9891\\u5217\\u8868\"), \" \")), __jsx(Breadcrumb.Item, null, __jsx(\"span\", {\n    className: \"bread-txt\"\n  }, \"xxx\"))));\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Home\"), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1, maximum-scale=1\"\n  })), __jsx(Header, null), __jsx(Row, {\n    className: \"home-main\",\n    type: \"flex\",\n    justify: \"center\"\n  }, __jsx(Col, {\n    className: \"home-main-left\",\n    xs: 23,\n    sm: 23,\n    md: 16,\n    lg: 16,\n    xl: 16\n  }, __jsx(\"div\", {\n    className: \"detail-bread\"\n  }, header), __jsx(\"div\", {\n    className: \"detail-title\"\n  }, content.title), __jsx(\"div\", {\n    className: \"detail-sub-title\"\n  }, __jsx(\"div\", {\n    className: \"list-sub-title\"\n  }, __jsx(\"div\", {\n    className: \"sub-item\"\n  }, __jsx(CalendarOutlined, null), __jsx(\"span\", {\n    className: \"sub-txt\"\n  }, \"2020/9/2\")), __jsx(\"div\", {\n    className: \"sub-item\"\n  }, __jsx(FolderOutlined, null), __jsx(\"span\", {\n    className: \"sub-txt\"\n  }, \"2020/9/2\")), __jsx(\"div\", {\n    className: \"sub-item\"\n  }, __jsx(FireOutlined, null), __jsx(\"span\", {\n    className: \"sub-txt\"\n  }, \"2020/9/2\")))), __jsx(\"div\", {\n    className: \"detail-content\",\n    dangerouslySetInnerHTML: {\n      __html: markdownVal\n    }\n  })), __jsx(Col, {\n    className: \"home-main-right\",\n    xs: 0,\n    sm: 0,\n    md: 5,\n    lg: 5,\n    xl: 5\n  }, __jsx(Author, null), __jsx(Affix, {\n    offsetTop: 10\n  }, __jsx(\"div\", {\n    className: \"detail-nav comm-box\"\n  }, __jsx(\"div\", {\n    className: \"nav-title\"\n  }, \"\\u6587\\u7AE0\\u5217\\u8868\"), tocify && tocify.render && tocify.render())))), __jsx(Footer, null));\n}\n\ndetail.getInitialProps = async context => {\n  const getDetail = async () => {\n    return getArticleById(context.query.id);\n  };\n\n  let res = await getDetail();\n  return {\n    content: res.data.data[0]\n  };\n};\n\nexport default detail;","map":null,"metadata":{},"sourceType":"module"}